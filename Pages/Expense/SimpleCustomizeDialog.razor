@implements IDialogContentComponent<Home.NameAndAge>

@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons

@* Header *@
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

@* Footer *@
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync">Save</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
</FluentDialogFooter>

@* Body *@
<FluentDialogBody>
    <FluentSelect Items=@stringOptions
                  OptionText="@(i => i.Text)"
                  OptionValue="@(i => i.Value)"
                  OptionSelected="@(i => i.Selected)"
                  @bind-SelectedOption="@selectedStringOption"
                  @bind-Value="@stringValue" />
    <FluentTextField @bind-Value="@Content.Name">Name:</FluentTextField>
    <FluentNumberField @bind-Value="@Content.Num">Num:</FluentNumberField>

</FluentDialogBody>




@code {
    [Parameter]
    public Home.NameAndAge Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private async Task SaveAsync()
    {
        await Dialog.CloseAsync(Content);
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

    string? stringValue;
    Option<string> selectedStringOption = default!;
    string? intValue;
    Option<int>? selectedIntOption;

    List<Option<string>> stringOptions = new()
        {
            { new Option<string> { Value = "income", Text = "รายรับ", Selected = true } },
            { new Option<string> { Value = "expense", Text = "รายจ่าย"} },

        };
}